// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_pov_limit
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-22, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Sergejs-MacBook-Air.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/debug/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_pov_limit
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/pov-limit/src/weights.rs
// --header=./HEADER-APACHE2
// --template=./.maintain/frame-weight-template.hbs
// --extrinsic=*

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_pov_limit.
pub trait WeightInfo {
	fn waste_ref_time(n: u32, ) -> Weight;
	fn waste_proof_size_some(n: u32, ) -> Weight;
	fn waste_proof_size_none(n: u32, ) -> Weight;
	fn on_idle() -> Weight;
}

/// Weights for pallet_pov_limit using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// The range of component `n` is `[0, 1024]`.
	fn waste_ref_time(_n: u32, ) -> Weight {
		// Minimum execution time: 16_000 nanoseconds.
		Weight::from_ref_time(17_479_694)
	}
	// Storage: PovLimit TrashData (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn waste_proof_size_some(n: u32, ) -> Weight {
		// Minimum execution time: 95_000 nanoseconds.
		Weight::from_ref_time(174_020_461)
			// Standard Error: 3_618
			.saturating_add(Weight::from_ref_time(4_761).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_proof_size(5000))
	}
	// Storage: PovLimit TrashData (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn waste_proof_size_none(_n: u32, ) -> Weight {
		// Minimum execution time: 94_000 nanoseconds.
		Weight::from_ref_time(95_029_483)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_proof_size(5000))
	}
	// Storage: PovLimit Storage (r:1 w:0)
	// Storage: PovLimit Compute (r:1 w:0)
	// Storage: PovLimit TrashData (r:49 w:0)
	fn on_idle() -> Weight {
		// Minimum execution time: 6_580_000 nanoseconds.
		Weight::from_ref_time(6_599_000_000)
			.saturating_add(T::DbWeight::get().reads(51))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// The range of component `n` is `[0, 1024]`.
	fn waste_ref_time(_n: u32, ) -> Weight {
		// Minimum execution time: 16_000 nanoseconds.
		Weight::from_ref_time(17_479_694)
	}
	// Storage: PovLimit TrashData (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn waste_proof_size_some(n: u32, ) -> Weight {
		// Minimum execution time: 95_000 nanoseconds.
		Weight::from_ref_time(174_020_461)
			// Standard Error: 3_618
			.saturating_add(Weight::from_ref_time(4_761).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(Weight::from_proof_size(5000))
	}
	// Storage: PovLimit TrashData (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn waste_proof_size_none(_n: u32, ) -> Weight {
		// Minimum execution time: 94_000 nanoseconds.
		Weight::from_ref_time(95_029_483)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(Weight::from_proof_size(5000))
	}
	// Storage: PovLimit Storage (r:1 w:0)
	// Storage: PovLimit Compute (r:1 w:0)
	// Storage: PovLimit TrashData (r:49 w:0)
	fn on_idle() -> Weight {
		// Minimum execution time: 6_580_000 nanoseconds.
		Weight::from_ref_time(6_599_000_000)
			.saturating_add(RocksDbWeight::get().reads(51))
	}
}
