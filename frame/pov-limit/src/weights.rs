
//! Autogenerated weights for pallet_pov_limit
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-21, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `something`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --dev
// --pallet=pallet-pov-limit
// --extrinsic=
// --steps=50
// --repeat=20
// --output=frame/pov-limit/src/weights.rs
// --template=.maintain/frame-weight-template.hbs
// --hostname-override=something

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_pov_limit.
pub trait WeightInfo {
	fn waste_ref_time(n: u32, ) -> Weight;
	fn waste_proof_size_some(n: u32, ) -> Weight;
	fn waste_proof_size_none(n: u32, ) -> Weight;
	fn on_idle() -> Weight;
}

/// Weights for pallet_pov_limit using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// The range of component `n` is `[0, 1024]`.
	fn waste_ref_time(n: u32, ) -> Weight {
		// Minimum execution time: 251 nanoseconds.
		Weight::from_ref_time(298_082)
			// Standard Error: 8
			.saturating_add(Weight::from_ref_time(48).saturating_mul(n.into()))
	}
	// Storage: PovLimit TrashData (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn waste_proof_size_some(n: u32, ) -> Weight {
		// Minimum execution time: 4_224 nanoseconds.
		Weight::from_ref_time(14_643_847)
			// Standard Error: 869
			.saturating_add(Weight::from_ref_time(23_048).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_proof_size(5000))
	}
	// Storage: PovLimit TrashData (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn waste_proof_size_none(n: u32, ) -> Weight {
		// Minimum execution time: 4_100 nanoseconds.
		Weight::from_ref_time(3_972_025)
			// Standard Error: 96
			.saturating_add(Weight::from_ref_time(1_253).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_proof_size(5000))
	}
	fn on_idle() -> Weight {
		// Minimum execution time: 7_755 nanoseconds.
		Weight::from_ref_time(7_964_000)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// The range of component `n` is `[0, 1024]`.
	fn waste_ref_time(n: u32, ) -> Weight {
		// Minimum execution time: 251 nanoseconds.
		Weight::from_ref_time(298_082)
			// Standard Error: 8
			.saturating_add(Weight::from_ref_time(48).saturating_mul(n.into()))
	}
	// Storage: PovLimit TrashData (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn waste_proof_size_some(n: u32, ) -> Weight {
		// Minimum execution time: 4_224 nanoseconds.
		Weight::from_ref_time(14_643_847)
			// Standard Error: 869
			.saturating_add(Weight::from_ref_time(23_048).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(Weight::from_proof_size(5000))
	}
	// Storage: PovLimit TrashData (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn waste_proof_size_none(n: u32, ) -> Weight {
		// Minimum execution time: 4_100 nanoseconds.
		Weight::from_ref_time(3_972_025)
			// Standard Error: 96
			.saturating_add(Weight::from_ref_time(1_253).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(Weight::from_proof_size(5000))
	}
	fn on_idle() -> Weight {
		// Minimum execution time: 7_755 nanoseconds.
		Weight::from_ref_time(7_964_000)
	}
}
