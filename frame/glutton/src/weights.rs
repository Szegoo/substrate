// This file is part of Substrate.

// Copyright (C) 2023 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_glutton
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-15, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `runner-osnnfcqu-project-145-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/production/substrate
// benchmark
// pallet
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --json-file=/builds/parity/mirrors/substrate/.git/.artifacts/bench.json
// --pallet=pallet_glutton
// --chain=dev
// --header=./HEADER-APACHE2
// --output=./frame/glutton/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_glutton.
pub trait WeightInfo {
	fn waste_ref_time_iter() -> Weight;
	fn waste_proof_size_some() -> Weight;
	fn waste_proof_size_none() -> Weight;
	fn read_limits() -> Weight;
	fn on_idle() -> Weight;
	fn empty_on_idle() -> Weight;
}

/// Weights for pallet_glutton using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn waste_ref_time_iter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_448_252 nanoseconds.
		Weight::from_ref_time(8_484_551_000)
			.saturating_add(Weight::from_proof_size(0))
	}
	/// Storage: Glutton TrashData (r:1 w:0)
	/// Proof: Glutton TrashData (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	fn waste_proof_size_some() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1521`
		//  Estimated: `2499`
		// Minimum execution time: 15_600 nanoseconds.
		Weight::from_ref_time(16_028_000)
			.saturating_add(Weight::from_proof_size(2499))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Glutton TrashData (r:1 w:0)
	/// Proof: Glutton TrashData (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	fn waste_proof_size_none() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `55`
		//  Estimated: `2499`
		// Minimum execution time: 3_928 nanoseconds.
		Weight::from_ref_time(4_124_000)
			.saturating_add(Weight::from_proof_size(2499))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Glutton Compute (r:1 w:0)
	/// Proof: Glutton Compute (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Glutton Storage (r:1 w:0)
	/// Proof: Glutton Storage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn read_limits() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `55`
		//  Estimated: `998`
		// Minimum execution time: 4_556 nanoseconds.
		Weight::from_ref_time(4_819_000)
			.saturating_add(Weight::from_proof_size(998))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Glutton Storage (r:1 w:0)
	/// Proof: Glutton Storage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Glutton Compute (r:1 w:0)
	/// Proof: Glutton Compute (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Glutton TrashData (r:2097 w:0)
	/// Proof: Glutton TrashData (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	fn on_idle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `124221`
		//  Estimated: `5241401`
		// Minimum execution time: 11_288_250 nanoseconds.
		Weight::from_ref_time(11_497_398_000)
			.saturating_add(Weight::from_proof_size(5241401))
			.saturating_add(T::DbWeight::get().reads(2099_u64))
	}
	fn empty_on_idle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 879 nanoseconds.
		Weight::from_ref_time(1_025_000)
			.saturating_add(Weight::from_proof_size(0))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn waste_ref_time_iter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_448_252 nanoseconds.
		Weight::from_ref_time(8_484_551_000)
			.saturating_add(Weight::from_proof_size(0))
	}
	/// Storage: Glutton TrashData (r:1 w:0)
	/// Proof: Glutton TrashData (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	fn waste_proof_size_some() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1521`
		//  Estimated: `2499`
		// Minimum execution time: 15_600 nanoseconds.
		Weight::from_ref_time(16_028_000)
			.saturating_add(Weight::from_proof_size(2499))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Glutton TrashData (r:1 w:0)
	/// Proof: Glutton TrashData (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	fn waste_proof_size_none() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `55`
		//  Estimated: `2499`
		// Minimum execution time: 3_928 nanoseconds.
		Weight::from_ref_time(4_124_000)
			.saturating_add(Weight::from_proof_size(2499))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Glutton Compute (r:1 w:0)
	/// Proof: Glutton Compute (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Glutton Storage (r:1 w:0)
	/// Proof: Glutton Storage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn read_limits() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `55`
		//  Estimated: `998`
		// Minimum execution time: 4_556 nanoseconds.
		Weight::from_ref_time(4_819_000)
			.saturating_add(Weight::from_proof_size(998))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Glutton Storage (r:1 w:0)
	/// Proof: Glutton Storage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Glutton Compute (r:1 w:0)
	/// Proof: Glutton Compute (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Glutton TrashData (r:2097 w:0)
	/// Proof: Glutton TrashData (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	fn on_idle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `124221`
		//  Estimated: `5241401`
		// Minimum execution time: 11_288_250 nanoseconds.
		Weight::from_ref_time(11_497_398_000)
			.saturating_add(Weight::from_proof_size(5241401))
			.saturating_add(RocksDbWeight::get().reads(2099_u64))
	}
	fn empty_on_idle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 879 nanoseconds.
		Weight::from_ref_time(1_025_000)
			.saturating_add(Weight::from_proof_size(0))
	}
}
